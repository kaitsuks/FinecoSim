//keskittyäminen laatia "prompt" tekoälylle käyttäen pohjana
-aluksi konsolitulostusta
-tähän asti tehtyjä määrittelyjä, 
-sovelluksen kuvausta ja 
-vaatimusmäärittelyä, 
-työkieleksi englanti tekoälylle

//GUI (graafinen käyttöliittymä)-ratkaisu erikseen tekoälyltä
-ei juuri ole mietitty vielä (pari kuvaketta löytyy)
-GUI eli graafinen käyttöliittymä kannattaa tehdä/pyytää erikseen. 
-Ainakin ChatGPT todennäköisesti voi ehdottaakin sellaisen tekemistä. 
-MVC (Model View Controller) on valittu 

 -keskittyminen: toimiva simulaatio, ensin kohtalaisen yksinkertainen määrittely

//PersonFactory 
1. Tehtävä on 
(1) luoda Person-olioita ja (2) 
antaa niiden jäsenmuuttujille/parametreille alkuarvot. 

2. (1) arpomalla tai (2) satunnaisesti
(1) Arpominen tapahtuu ottamalla ennaltamäärätyistä arvoista
"pool" -> kaikki keskiarvot ovat aina vakioita
"laskuri" ????
(2) Satunnainen valinta voi myös toimia

3. Silmukka toistuu n-kertaa ja arpoo noita ominaisuuksia.
Silmukka voisi valita "poolista" tai "laskurista"

4. Alkukokeilu 30-100:lla Person-oliolla.
-Manuaalinen olioiden tekeminen on liian työlästä
Muuttujat olioille: 
(aluksi: asetettu ja satunnaistettu, 
jatkossa: riippuvainen yhteiskunnallisista tekijöistä (työllisyydestä, suhdanteista))

//visualisointi
Aluksi konsolitulostus. Jatko epävarma.

//musiikki
mahdollinen

//Mietin noita asioita käsiteltäväksi, 
-simulaatiossa on syytä olla muutama rinnakkainen asia. 
-tutkitaan siis ihmisten parturi/kampaamo-käyntejä. 
-oletuksia: naiset ovat "turhamaisempia", alkoholin kohdalla miehet ovat persompia.

//toteutus
-Aluksi arvotaan ominaisuudet, ei vielä "poolia"
 
//PersonFactory 
-arpoo ominaisuuksia tietyillä todennäköisyyksillä - joita on käyttäjän voitava muuttaa. 

//todenäköisyydet
-omassa tiedostossa 
-niihin voi vaikuttaa käyttöliittymän editorilla
-käyttäjän ei tule pitäisi manipuloida C#-koodia. 
-Tässä vaiheessa voi muokata julkisia (public) ominaisuuksia Unity-ohjelmassa, mutta ei toimi lopullisessa 
-erilliset ladattavat sovellukset ovat parempia siinä, että käyttäjä huolehtii tallennustilasta ja muusta kapasiteetista. 
-lokitiedostot ovat suuria

//Arkkitehtuurin kannalta
-Luokkien on parasta olla samankokoisia
-Suuria luokkia voi hajauttaa (esim. Person tai muun agentin pitäisi koostua osista, aineenvaihdunta, Talous)
-Pienissä joukoissa satunnaisuus on huono, poolin/laskurin käyttö on tosiaan perusteltua 
-Arvonnan jälkeen ei haittaa jos esim. kaikki ovat sattumalta naisia/miehiä/juoppoja 
Määrät voi toki laittaa näkyville ja pitääkin.

//voisi alustavasti miettiä
-työllisyysvaikutuksia
-tulonmuodostusta 

//kiinnostavaa olisi nähdä 
-vaikutus kokonaistyöllisyyteen tai sosiaaliturvan tarpeeseen 

//-yksinkertaisuus:
Turhaa tietoa simulaation kannalta (Person.cs):
string savingsAccount = "12345678";
    int dayOfWage = 2;
float weightPerson = 80f;
    float heightPerson = 180f;
string skincolour = "white";

//PersonFactoryssä pitäisi ominaisuuksia arpoa siten, että ne vastaavat tiettyjä jakaumia. Voi siis olla painotetut random-luvut ja/tai tietyt "poolit" rooleja ja demografisia ominaisuuksia varten.
Kaitsuks

//yksinkertaisia kokeiluja:
-kannattaa tehdä usein yksinkertaisia kokeiluja esim.
-meneekö agentti parturiin, kun tukka on kasvanut tarpeeksi pitkäksi 
-tuleeko tilille palkkaa
-aluksi konsolitulostus, pikuu hiljaa visualisointi

//agenteille

Simulaation aloituksessa: 
-aluksi voi olla 5 vuoden simulointi, ei syntymää, ei kuolemaa, iällä ei ole väliä
-pitemmässä simulaatiossa mm. kulutustottumukset voivat muuttua

-Vaatimusmäärittely: näyttää jo varsin hyvältä
-prompts-tiedosto: näyttää pikemminkin Use Cases -tiedostolta

-Tekoälylle kirjoitettava prompt voisi olla jotain seuraavan kaltaista mutta englanniksi:
Laadi ohjelmakoodi (C#) taloussimulaatiota varten, 
jossa tarkasteltavina asioina ovat ravintola-ala ja parturikampaamoala. 
Tarkoitus on tarkastella erityisesti (1) arvonlisäveron ja (2) muiden verojen 
vaikutusta (1) kulutukseen ja sen kautta (2) työllisyyteen ja (3) valtion verotuloihin. 
Simulaatio toteutetaan käyttäen Unityn luokista muodostettuja olioita 
itsenäisinä agentteina, jotka vastaavat väestön demografista rakennetta karkeasti. 
Olioiden määrä on säädettävissä, mutta esimerkiksi 300 aluksi. 
Käyttäjä voi hallituksen ominaisuudessa säätää (1) eri veroja ja 
(2) muita parametrejä (aukioloaikoja?) 
(3) ja ajaa simulaatiota useita kierroksia (päivä/viikko/kuukausi?) 
useiden virtuaalisten vuosien ajan. 
Myöhemmin simulaatiota voidaan laajentaa pitempiin ajanjaksoihin, 
jolloin agentit syntyvät, ikääntyvät ja kuolevat.
